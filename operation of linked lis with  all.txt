#include <iostream>

using namespace std;

// Node class
class Node {
public:
    int data;
    Node* next;

    Node(int value) {
        data = value;
        next = nullptr;
    }
};

// Linked List class
class LinkedList {
private:
    Node* head;

public:
    LinkedList() {
        head = nullptr;
    }

    // Create linked list
    void create() {
        int n;
        cout << "Enter number of nodes: ";
        cin >> n;
        for (int i = 0; i < n; i++) {
            int data;
            cout << "Enter node " << i + 1 << " data: ";
            cin >> data;
            Node* newNode = new Node(data);
            if (head == nullptr) {
                head = newNode;
            } else {
                Node* current = head;
                while (current->next) {
                    current = current->next;
                }
                current->next = newNode;
            }
        }
    }

    // Display linked list
    void display() {
        Node* current = head;
        while (current) {
            cout << current->data << " ";
            current = current->next;
        }
        cout << endl;
    }

    // Insert at beginning
    void insertAtBeginning(int data) {
        Node* newNode = new Node(data);
        newNode->next = head;
        head = newNode;
    }

    // Insert at end
    void insertAtEnd(int data) {
        Node* newNode = new Node(data);
        if (head == nullptr) {
            head = newNode;
        } else {
            Node* current = head;
            while (current->next) {
                current = current->next;
            }
            current->next = newNode;
        }
    }

    // Insert at specified position
    void insertAtPosition(int data, int position) {
        Node* newNode = new Node(data);
        if (position == 0) {
            newNode->next = head;
            head = newNode;
        } else {
            Node* current = head;
            int currentPosition = 0;
            while (current && currentPosition < position - 1) {
                current = current->next;
                currentPosition++;
            }
            if (current) {
                newNode->next = current->next;
                current->next = newNode;
            } else {
                cout << "Position out of range" << endl;
            }
        }
    }

    // Delete from beginning
    void deleteFromBeginning() {
        if (head) {
            Node* temp = head;
            head = head->next;
            delete temp;
        } else {
            cout << "List is empty" << endl;
        }
    }

    // Delete from end
    void deleteFromEnd() {
        if (head) {
            Node* current = head;
            Node* prev = nullptr;
            while (current->next) {
                prev = current;
                current = current->next;
            }
            if (prev) {
                prev->next = nullptr;
            } else {
                head = nullptr;
            }
            delete current;
        } else {
            cout << "List is empty" << endl;
        }
    }

    // Delete from specified position
    void deleteFromPosition(int position) {
        if (head) {
            if (position == 0) {
                Node* temp = head;
                head = head->next;
                delete temp;
            } else {
                Node* current = head;
                int currentPosition = 0;
                Node* prev = nullptr;
                while (current && currentPosition < position) {
                    prev = current;
                    current = current->next;
                    currentPosition++;
                }
                if (current) {
                    prev->next = current->next;
                    delete current;
                } else {
                    cout << "Position out of range" << endl;
                }
            }
        } else {
            cout << "List is empty" << endl;
        }
    }
};

int main() {
    LinkedList list;
    int choice;
    do {
        cout << "Menu:" << endl;
        cout << "1. Create" << endl;
        cout << "2. Display" << endl;
        cout << "3. Insert at beginning" << endl;
        cout << "4. Insert at end" << endl;
        cout << "5. Insert at specified position" << endl;
        cout << "6. Delete from beginning" << endl;
        cout << "7. Delete from end" << endl;
        cout << "8. Delete from specified position" << endl;
        cout << "9. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;
        switch (choice) {
            case 1:
                list.create();
                break;
            case 2:
                list.display();
            case 3: {
                int data;
                cout << "Enter data to insert at beginning: ";
                cin >> data;
                list.insertAtBeginning(data);
                break;
            }
            case 4: {
                int data;
                cout << "Enter data to insert at end: ";
                cin >> data;
                list.insertAtEnd(data);
                break;
            }
            case 5: {
                int data, position;
                cout << "Enter data to insert: ";
                cin >> data;
                cout << "Enter position: ";
                cin >> position;
                list.insertAtPosition(data, position);
                break;
            }
            case 6:
                list.deleteFromBeginning();
                break;
            case 7:
                list.deleteFromEnd();
                break;
            case 8: {
                int position;
                cout << "Enter position to delete: ";
                cin >> position;
                list.deleteFromPosition(position);
                break;
            }
            case 9:
                cout << "Exiting..." << endl;
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    } while (choice != 9);
    return 0;
}